#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Last edited 2021-02-10

Anisotropic polycrystal multiphase field: geometry generated by Neper software,
adapted from phase_field_composites by Jérémy Bleyer,
https://zenodo.org/record/1188970

This file is part of phase_field_polycrystals based on FEniCS project 
(https://fenicsproject.org/)

phase_field_polycrystals (c) by Jean-Michel Scherer, 
Ecole des Ponts ParisTech, 
Laboratoire Navier (ENPC,IFSTTAR,CNRS UMR 8205) & 
Ecole Polytechnique, 
Laboratoire de Mécanique des Solides, Institut Polytechnique

phase_field_polycrystals is licensed under a
Creative Commons Attribution-ShareAlike 4.0 International License.

You should have received a copy of the license along with this
work. If not, see <http://creativecommons.org/licenses/by-sa/4.0/>.
"""
_author__ = "Jean-Michel Scherer"
__license__ = "CC BY-SA 4.0"
__email__ = "jean-michel.scherer@enpc.fr"

import os
import meshio
import numpy as np
from dolfin import *
from .mesh_converter import *

class NeperGeometry:
    """ Construct a polycrystal geometry and associated tessellation, mesh, crystal orientations using Neper""" 
    def __init__(self,dimension=2,nbgrains=50,L=1.,W=1.,H=0.,cledge=.75,rcl=.75, \
                 id='0',neper_mesh='out',morpho='voronoi',orientation='uniform', \
                 symmetry='cubic',oriformat='plain',oridescriptor='euler-bunge:active',extras='',\
                 format_tess='tess'):
        self.dimension=dimension
        self.nbgrains=nbgrains
        self.L=L
        self.W=W
        self.H=H
        self.cledge=cledge
        self.rcl=rcl
        self.id=id
        self.neper_mesh=neper_mesh
        self.file_tess=self.neper_mesh+'.tess'
        self.file_msh=self.neper_mesh+'.msh'
        self.morpho=morpho
        self.orientation=orientation
        self.symmetry=symmetry
        self.oriformat=oriformat
        self.oridescriptor=oridescriptor
        self.extras=extras
        self.format_tess = format_tess

    def make_microstructure_tessellation(self):
        if (self.morpho == 'voronoi'):
            cells    = " -n %s -morpho 'voronoi'" % self.nbgrains
        elif (("square" in self.morpho) or ("octa" in self.morpho) or ("aspratio" in self.morpho)):
            cells    = " -n %s -morpho %s" %  (self.nbgrains,self.morpho)
            if (("diameq" in self.morpho)):
                cells    = " -n 'from_morpho' -morpho %s" %  (self.morpho)       
        else:
            cells = self.morpho
        #else:
        #    cells    = " -n 'from_morpho' -morpho 'graingrowth(%s)' " % self.diameq
        out_name = " -o %s " % self.neper_mesh
        dim      = " -dim %s " % self.dimension
        form     = " -format %s "  % self.format_tess
        index    = " -id %s " % self.id
        domain   = " -domain '%s' " % self.shape
        command  = " neper -T " + cells + dim + form + index + domain + out_name
        print("Running: "+command)
        os.system(command)
    
    def make_microstructure_mesh(self,format='msh'):
        dim     = " -dim %s " % self.dimension
        form    = " -format %s " % format
        cledge_ = " -cledge %s " % self.cledge
        rcl_    = ""
        if (self.rcl > 0.):
            rcl_    = " -rcl %s " % self.rcl
        command ="neper -M " + self.file_tess + dim + form + cledge_ + rcl_ + self.extras
        print("Running: "+command)
        os.system(command)
        # out_name = file_tess.split('.')[0] + '.%s' % (format)
        # return out_name
    
    def make_mesh_picture(self):
        command = 'neper -V %s -cameraangle 12 -imagesize 600:600 \
                  -dataelsetcol id -dataelt3dedgerad 0.001 -dataelt1drad 0.0025 \
                  -showelt1d all -showelt "x<0.35||y>0.65||z<0.35"         \
    	          -showelt1d elt3d_shown -print %s' % (self.file_msh,self.neper_mesh)
        print("Running: "+command)
        os.system(command)
        # return output
    
    def make_mesh(self,cell_type,prune_z=False):
        cells = np.vstack([cell.data for cell in self.msh.cells if cell.type==cell_type])
        cell_data = np.hstack([self.msh.cell_data_dict["gmsh:physical"][key]
        for key in self.msh.cell_data_dict["gmsh:physical"].keys() if key==cell_type])
        # Remove z-coordinates from mesh if we have a 2D cell and all points have the same third coordinate
        points= self.msh.points
        if prune_z:
            points = points[:,:2]
        mesh_new = meshio.Mesh(points=points, cells={cell_type: cells}, cell_data={"grains":[cell_data]})
        return mesh_new

    def make_orientations(self,format='ori'):
        load       = " -loadtess '%s' " % self.file_tess
        ori        = " -ori '%s' " % self.orientation
        sym        = " -oricrysym '%s' " % self.symmetry
        oform      = " -oriformat '%s' " % self.oriformat
        form       = " -format '%s' " % format
        descriptor = " -oridescriptor '%s' " % self.oridescriptor
        command    = "neper -T " + load + ori + sym + oform + form + descriptor
        print("Running: " + command)
        os.system(command)
        # out_name = file_tess.split('.')[0] + '.%s' % (format)
        # return out_name
    
    def setup_geometry(self,make_tess=True,make_mesh=True,make_ori=True):
        if (self.dimension == 2):
            self.shape  = 'square(%s,%s)' % (self.L,self.W)
            #self.diameq = 2.*np.sqrt(self.L*self.W/np.pi/self.nbgrains)
        elif (self.dimension == 3):
            self.shape  = 'cube(%s,%s,%s)' % (self.L,self.W,self.H)
            #self.diameq = 2.*((3./4)*self.L*self.W*self.H/np.pi/self.nbgrains)**(1./3.)

        # make microstructure tessellation, mesh and orientations
        #if (not os.path.isfile(self.file_tess)):
        if (make_tess):
            # make tessellation
            self.make_microstructure_tessellation()
            # make mesh
        if make_ori:
            self.make_orientations(format='ori')
        if make_mesh:
            self.make_microstructure_mesh(format='msh')
            #self.make_microstructure_mesh(format='geof')
            # make a png picture of the mesh
            #self.make_mesh_picture()
            # make orientations

            xdmf = MeshioMsh2Xdmf(self.dimension,self.neper_mesh,extras=self.extras)
            xdmf.write_xdmf_mesh()
            xdmf.read_xdmf_mesh()
            self.msh = xdmf.msh_mesh
            self.meshio_mesh = xdmf.meshio_mesh
            self.mesh = xdmf.mesh
            self.mesh_dim = xdmf.mesh_dim
            self.mvc = xdmf.mvc
            self.mf = xdmf.mf
            self.dx = xdmf.dx
            self.facets = xdmf.facets  
