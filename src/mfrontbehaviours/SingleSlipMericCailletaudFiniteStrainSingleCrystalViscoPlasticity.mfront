@DSL ImplicitFiniteStrain;
@Behaviour SingleSlipMericCailletaudFiniteStrainSingleCrystalViscoPlasticity;
@Author Thomas Helfer, Jean-Michel Scherer;
@Date 02 / 11 / 2022;
@Description {
}

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;

@Algorithm NewtonRaphson;
@Epsilon 1.e-14;
@Theta 1;

/**/
@Brick FiniteStrainSingleCrystal{
  young_modulus1 : 1., //208000,
  young_modulus2 : 1., //208000,
  young_modulus3 : 1., //208000,
  poisson_ratio12 : 0.3,
  poisson_ratio23 : 0.3,
  poisson_ratio13 : 0.3,
  shear_modulus12 : 0.384615384615385, //80000,
  shear_modulus23 : 0.384615384615385, //80000,
  shear_modulus13 : 0.384615384615385, //80000
  shifted_elastic_deformation_gradient : true
};
/**/
/*
@Brick FiniteStrainSingleCrystal{
  //young_modulus: 1.0,
  //poisson_ratio: 0.3
  young_modulus1 : 1.,
  young_modulus2 : 1.,
  young_modulus3 : 1.,
  poisson_ratio12 : 0.3,
  poisson_ratio23 : 0.3,
  poisson_ratio13 : 0.3,
  shear_modulus12 : 0.384615384615385,
  shear_modulus23 : 0.384615384615385,
  shear_modulus13 : 0.384615384615385,
  shifted_elastic_deformation_gradient : true
};
*/

@CrystalStructure FCC;
@SlipSystem<0, 1, -1>{1, 1, 1};
//@InteractionMatrix{1, 1, 0.6, 1.8, 1.6, 12.3, 1.6};
@InteractionMatrix{1, 0., 0., 0., 0., 0., 0.};

//@Parameter n = 1.; //10.0;
//@Parameter K = 1.; //25.;
//@Parameter Q = 0.; //11.43;
//@Parameter b = 0.; //2.1;
//@Parameter tau0 = 1.; //66.62;
//@Parameter d = 0.; //494.0;
//@Parameter C = 0.; //14363;

@MaterialProperty real n;
@MaterialProperty real K;
@MaterialProperty real Q;
@MaterialProperty real b;
@MaterialProperty real tau0;
@MaterialProperty real d;
@MaterialProperty real C;
@MaterialProperty real SingleSlipCoeff;

//@IntegrationVariable strain g[Nss];
//@StateVariable strain g[Nss];
//g.setEntryName("PlasticSlip");

@AuxiliaryStateVariable strain p[Nss];
p.setEntryName("EquivalentViscoplasticSlip");

@AuxiliaryStateVariable strain a[Nss];
a.setEntryName("BackStrain");

@AuxiliaryStateVariable stress tau[Nss];
tau.setEntryName("ResolvedShearStress");

@LocalVariable strain dPsi_d;

@AuxiliaryStateVariable strain Psi_pl;
Psi_pl.setEntryName("DissipatedEnergy");

@AuxiliaryStateVariable tensor<3u,real> Fp;
Fp.setEntryName("PlasticPartOfTheDeformationGradient");

@Parameter real kres = 1e-5;
kres.setEntryName("ResidualStiffness");

@ExternalStateVariable real damage;
damage.setGlossaryName("Damage");

@Integrator {
  using size_type = unsigned short;
  const auto& m = ss.him;
  constexpr const auto eeps = 1.e-12;
  const auto seps = eeps * D(0, 0);
  real exp_bp[Nss];
  for (size_type i = 0; i != Nss; ++i) {
      const auto p_ = p[i] + theta * abs(dg[i]);
      exp_bp[i] = exp(-b * p_);
  }
  dPsi_d = 0.;
  Fp = tensor<3u,real>::Id();
  for (size_type i = 0; i != Nss; ++i) {
    //const auto tau = M | ss.mu[i];
    tau[i] = M | ss.mu[i];
    auto r = tau0;
    r = (i==0) ? r : SingleSlipCoeff*tau0; // to artificially enforce single slip on first system only
    for (size_type j = 0; j != Nss; ++j) {
      r += Q * m(i, j) * (1 - exp_bp[j]);
    }
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    const auto x = C * (a[i] + theta * da);
    const auto f = max(abs(tau[i] - x) - r, stress(0));
//    if (f > 1.1 * K) {
//      return false;
//    }
    const auto sgn = tau[i] - x > 0 ? 1 : -1;
    // viscoplasticity
    const auto v = pow(f / K, n);
    //const auto dv = n * v / (max(f, seps));
    const auto dv = (n / K) * pow(f / K, n - 1);
    fg[i] -= dt * v * sgn;
    dfg_ddeel(i) = -dt * dv * (ss.mu[i] | dM_ddeel);
    const auto sgn_gi = dg(i) > 0 ? 1 : -1;
    const auto dda_ddg =
        (1 - d * a[i] * sgn_gi) / (power<2>(1 + theta * d * abs(dg[i])));
    dfg_ddg(i, i) += dt * dv * C * theta * dda_ddg;
    for (size_type j = 0; j != Nss; ++j) {
      const auto sgn_gj = dg(j) > 0 ? 1 : -1;
      const auto dr = Q * m(i, j) * theta * b * exp_bp[j] * sgn_gj;
      dfg_ddg(i, j) += dt * dv * dr * sgn;
    }
    dPsi_d += tau[i] * dg[i];
    // Fp += g[i] * ss.mu[i]; // this is wrong
  }
}

@UpdateAuxiliaryStateVariables {
  using size_type = unsigned short;
  //const auto& ss = FCCMericCailletaudFiniteStrainSingleCrystalViscoPlasticity<real>::getSlipSystems();
  //Fp = tensor<3u,real>::Id();
  for (size_type i = 0; i != Nss; ++i) {
    p[i] += abs(dg[i]);
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    a[i] += da;
  }
  const auto gd = (1-damage) * (1-damage) + kres;
  sig = gd * sig;
  Psi_pl += dPsi_d;
  Fp = invert(Fe+tensor<3u,real>::Id())*F1;
}

/*
@TangentOperator<DTAU_DDF,Append,AtEnd>{ //<DTAU_DDF>{
  const auto gd = (1-damage) * (1-damage) + kres;
  Dt = gd * Dt;
}
*/

@DissipatedEnergy{
  Psi_d += dPsi_d;
}

@InternalEnergy {
  const auto gd = (1 - damage) * (1 - damage) + kres;
  Psi_s = (0.5 / gd) * (sig | eel);
}
